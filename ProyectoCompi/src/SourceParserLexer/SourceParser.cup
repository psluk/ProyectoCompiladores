/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package ParserLexer;
import java_cup.runtime.*;

// Symbol table management
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Stack;
import java.io.FileWriter;

action code {:
    HashMap<String, ArrayList<SymbolTableItem>> symbolTableList = new HashMap<String, ArrayList<SymbolTableItem>>();
    Stack<String> scope = new Stack<String>();
    // boolean startUnnamedBlock = false;

    // Needed for blocks without a name (e.g. if, else, etc.)
    int unnamedBlockCount = 0;

    public void printTable() throws Exception {
        for (String key: symbolTableList.keySet()) {
            writer.write("Tabla de símbolos: " + key + "\n");
            writer.write("Valores: \n");
            writer.write(SymbolTableItem.getFields() + "\n");
            if (symbolTableList.get(key).isEmpty()) {
                writer.write("/* Tabla vacía */\n");
            }
            for (SymbolTableItem item : symbolTableList.get(key)) {
                writer.write(item.toString() + "\n");
            }
            writer.write("\n");
        }
    }

    public String getCurrentScope(){
        return scope.peek();
    }

    public void newScope() {
        // Creates a name for the scope
        unnamedBlockCount++;
        String unnamedBlockName = "block_" + unnamedBlockCount;
        scope.push(unnamedBlockName);
        symbolTableList.put(unnamedBlockName, new ArrayList<SymbolTableItem>());
    }
:}

parser code {:
    // Connect this parser to a scanner!
    LexerProject lexer;
    private FileWriter writer;
    
    @SuppressWarnings("deprecation")
    public parser(LexerProject lexer, FileWriter out){
        this.lexer = lexer;
        this.symbolFactory = new DefaultSymbolFactory();
        this.writer = out;
    }
:}

/* define how to connect to the scanner! */
init with {: :};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */

/* keywords */
terminal            COLACHO, SANNICOLAS, SINTERKLAAS, PAPANOEL, DEDMOROZ;

/* function keywords */
terminal            BOLSA, CHIMENEA;

/* literals */
terminal int        l_SANNICOLAS;
terminal float      l_SINTERKLAAS;
terminal boolean    l_tCOLACHO;
terminal boolean    l_fCOLACHO;
terminal char       l_PAPANOEL;
terminal String     l_DEDMOROZ;

/* operators */

/* assignment */
terminal            ENTREGA;

/* binary */
terminal            RODOLFO, BRIOSO, DANZARIN, BROMISTA, COMETA, CUPIDO;

/* relational */
terminal            CANALLA, CHISPA, BUFON, ASTUTO, COPODENIEVE, FELICIDAD;

/* unary */
terminal            GRINCH, QUIEN;

/* logical */
terminal            MELCHOR, GASPAR, BALTASAR;

/* expressions */
terminal            ABREREGALO, CIERRAREGALO, ABRECUENTO, CIERRACUENTO, FINREGALO, ABREEMPAQUE, CIERRAEMPAQUE;

/* control */
terminal            ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;

/* I/O */
terminal            NARRA, ESCUCHA;

/* functions */
terminal            ADORNO;

/* identifiers */
terminal            PERSONA;

/* Non-terminals (symbols used in the grammar). */
non terminal        abrirRuta, rutaNavideña, gengibre, rutaNavideñaAux, tSantaClaus, tlSantaClaus, creaRegalo,
                    creaEntregaRegalo, regalo, regaloManual, entregaRegalo, regaloEnvuelto, trineoSanta, paqueteTrineoSanta,
                    entregaTrineoSanta, confites, abrirBolsaNavideña, bolsaNavideña, envoltorios, llamadaNavideña, regaloPrin,
                    regaloAgregado, regaloMultiplicado, regaloCompartido, regaloVolador, confiteAdornado,
                    regaloComprado, regaloConfirmado, confite, regalos, mezcla, regresaFiesta, terminaFiesta,
                    narraCuento, escuchaCuento, galletaControl, chocolate, leche, galletaRegalo, galletaNavidad,
                    galletaChocolate, regaloAbierto, bolsaNavideñaAux, navidad;

/* Start symbol (the symbol the parser will start with). */
start with          navidad;

/* Grammar */
/* _`rutaNavideña` = bloque de código_     */
// _(`rutaNavideñaAux` permite un bloque vacío)_

abrirRuta ::= ABREREGALO {:newScope();:} rutaNavideñaAux {:scope.pop();:} ;

rutaNavideña ::= ABREREGALO gengibre CIERRAREGALO |
                 abrirRuta gengibre CIERRAREGALO |
                 abrirRuta CIERRAREGALO ;

rutaNavideñaAux ::= rutaNavideña |
                    ABREREGALO CIERRAREGALO ;
               
/* _`tSantaClaus` = tipo de santa = tipos_ */

tSantaClaus ::= 
            COLACHO:tp {: RESULT = tp; :} |
            SANNICOLAS:tp {: RESULT = tp; :} |
            SINTERKLAAS:tp {: RESULT = tp; :} |
            PAPANOEL:tp {: RESULT = tp; :} |
            DEDMOROZ:tp {: RESULT = tp; :} ;
            
/* _`tlSantaClaus` = tipo de literal (b)_ */

tlSantaClaus ::= 
            l_SANNICOLAS |
            l_SINTERKLAAS |
            l_tCOLACHO |
            l_fCOLACHO |
            l_PAPANOEL |
            l_DEDMOROZ ;
            
/* _`creaRegalo` = variables (b), (d)_ */

creaRegalo ::= CHIMENEA tSantaClaus:tsc PERSONA:per {:
                symbolTableList.get(getCurrentScope()).add(
                    new SymbolTableItem(per.toString(), tsc.toString(), "variable", perleft, perright)
                    );
                :} ;

/* _`creaEntregaRegalo` = asignar variable (d)_ */

creaEntregaRegalo ::= creaRegalo ENTREGA regalo ;

entregaRegalo ::= PERSONA ENTREGA regalo ;

// Expresiones sueltas:

regalo ::= regaloManual ;

/* _`trineoSanta` = arreglo estático (c)_ */

trineoSanta ::= CHIMENEA tSantaClaus:tsc PERSONA:per ABREEMPAQUE l_SANNICOLAS CIERRAEMPAQUE {:
                symbolTableList.get(getCurrentScope()).add(
                    new SymbolTableItem(per.toString(), tsc.toString(), "array", perleft, perright)
                    );
                :};

/* _`paqueteTrineoSanta` = lee un elemento del arreglo_ */

paqueteTrineoSanta ::= PERSONA ABREEMPAQUE l_SANNICOLAS CIERRAEMPAQUE ;

/* _`entregaTrineoSanta`: `AAA[0] <= 1 |` → asignar valor al arreglo estático_ */

entregaTrineoSanta ::= paqueteTrineoSanta ENTREGA tlSantaClaus ;

/* _(a) funciones  -> function int persona (parametros){bloque de código}_ */

confites ::= confites ADORNO tSantaClaus:tsc PERSONA:per {:
                symbolTableList.get(getCurrentScope()).add(
                    new SymbolTableItem(per.toString(), tsc.toString(), "parameter", perleft, perright)
                    );
                :} |
             tSantaClaus:tsc PERSONA:per {:
                symbolTableList.get(getCurrentScope()).add(
                    new SymbolTableItem(per.toString(), tsc.toString(), "parameter", perleft, perright)
                    );
                :} ;

abrirBolsaNavideña ::= BOLSA tSantaClaus:tsc PERSONA:per {:
                    symbolTableList.get(getCurrentScope()).add(
                        new SymbolTableItem(per.toString(), tsc.toString(), "function", perleft, perright)
                    );
                    scope.push(per.toString());
                    symbolTableList.put(per.toString(), new ArrayList<SymbolTableItem>());
                  :} 
                  ;

bolsaNavideña ::= abrirBolsaNavideña ABRECUENTO confites CIERRACUENTO rutaNavideña {:scope.pop();:} |
                  abrirBolsaNavideña ABRECUENTO CIERRACUENTO rutaNavideña {:scope.pop();:} 
                  | BOLSA error rutaNavideña
                  ;

envoltorios ::= envoltorios ADORNO PERSONA | PERSONA ;

llamadaNavideña ::= PERSONA ABRECUENTO envoltorios CIERRACUENTO |
                    PERSONA ABRECUENTO CIERRACUENTO ;
                    
/* _(e, f, g) expresiones y combinación de ellas, respetando precedencia_
    - _Se crean cuatro niveles, tal que no se pueda volver de una operación de mayor precedencia a una de menor precedencia: 1: `**`, 2: `~`, 3: `*` o `/`, 4: `+` o `-`_  */

// Se unificarán las expresiones aritméticas, relacionales y lógicas, con la siguiente precedencia:
// - `!` (negación)
// - `++`, `--`, `-` (el `-` unario)
// - `**`
// - `*`, `/`
// - `~`
// - `+`, `-`
// - `<`, `<==`, `>`, `>=`, `==`, `!=`
// - `^` (`AND`)
// - `#` (`OR`)
//
// Por lo tanto, `++3 - 2 <== !2 ^ true` equivaldría a `(((++3) - 2) <== (!2)) ^ true`.

regaloPrin ::= regaloAgregado ;

regaloAgregado ::= regaloAgregado RODOLFO regaloMultiplicado |
                   regaloAgregado BRIOSO regaloMultiplicado  |
                   regaloMultiplicado ;

regaloMultiplicado ::= regaloMultiplicado BROMISTA regaloCompartido |
                       regaloMultiplicado COMETA regaloCompartido |
                       regaloCompartido ;

regaloCompartido ::= regaloCompartido CUPIDO regaloVolador |
                     regaloVolador ;

regaloVolador ::= regaloVolador DANZARIN regaloEnvuelto |
                  regaloEnvuelto ;
                  
/* _(h) Operaciones unarias_ */

confiteAdornado ::= GRINCH PERSONA |
                    QUIEN PERSONA ;
                    
/* _(i) Expresiones relacionales (sobre enteros y flotantes)_ */

regaloComprado ::= regaloComprado CANALLA regaloPrin |
                   regaloComprado CHISPA regaloPrin |
                   regaloComprado BUFON regaloPrin |
                   regaloComprado ASTUTO regaloPrin |
                   regaloComprado COPODENIEVE regaloPrin |
                   regaloComprado FELICIDAD regaloPrin |
                   regaloPrin ;
                   
/* _(j) Expresiones lógicas_ */

// Se necesita una regla adicional (`regaloEnvuelto`) para establecer la prioridad: primero la negación, luego el `AND` y luego el `OR`.

regaloManual ::= regaloManual GASPAR regaloConfirmado |
                 regaloConfirmado ;

regaloConfirmado ::= regaloConfirmado MELCHOR regaloComprado |
                    regaloComprado ;

regaloEnvuelto ::= BALTASAR confite |
                   confite ;

confite ::= ABRECUENTO regalo CIERRACUENTO |
            PERSONA |
            confiteAdornado |
            tlSantaClaus |
            paqueteTrineoSanta |
            llamadaNavideña ;
            
// `gengibre` son las líneas de código (o un bloque `{...}` con `rutaNavideñaAux`)

gengibre ::= gengibre regalos |
             gengibre {:newScope();:} rutaNavideñaAux {:scope.pop();:} |
             regalos ;
             
// `regalos` es una sola línea de código

regalos ::= creaRegalo FINREGALO | creaEntregaRegalo FINREGALO | entregaRegalo FINREGALO | mezcla |
            regalo FINREGALO | regresaFiesta | terminaFiesta | narraCuento | escuchaCuento |
            trineoSanta FINREGALO | entregaTrineoSanta FINREGALO | FINREGALO 
            | error FINREGALO
            ;
            
/* _(m) Estructuras de control (`if`-[`elif`]-[`else`]) -> `if(a > b){print(a)|}`_ */

// - `galletaControl` son los `if`, `elif` y `else`
// - `galletaRegalo` = `if`, `galletaNavidad` = `elif` y `galletaChocolate` = `else`
// - `if` es obligatorio; `elif` y `else` son opcionales, así que se incluyen las combinaciones

mezcla ::= galletaControl |
           chocolate |
           leche ;

galletaControl ::= galletaRegalo galletaNavidad galletaChocolate |
                   galletaRegalo galletaNavidad |
                   galletaRegalo galletaChocolate |
                   galletaRegalo ;

galletaRegalo ::= ELFO ABRECUENTO regalo CIERRACUENTO {:newScope();:} rutaNavideñaAux {:scope.pop();:} ;

galletaNavidad ::= galletaNavidad HADA ABRECUENTO regalo CIERRACUENTO {:newScope();:} rutaNavideñaAux {:scope.pop();:} |
                   HADA ABRECUENTO regalo CIERRACUENTO {:newScope();:} rutaNavideñaAux {:scope.pop();:} ;

galletaChocolate ::= DUENDE {:newScope();:} rutaNavideñaAux {:scope.pop();:} ;

/* _(m) `do-until` y `for`. `return`, `break`_ */

// `chocolate` es el `for` 

chocolate ::= ENVUELVE {:newScope();:} ABRECUENTO regaloAbierto FINREGALO regalo FINREGALO regaloAbierto CIERRACUENTO rutaNavideñaAux {:scope.pop();:} ;

regaloAbierto ::= creaRegalo | creaEntregaRegalo | entregaRegalo | mezcla | regalo | narraCuento | escuchaCuento |
                  rutaNavideñaAux | trineoSanta | entregaTrineoSanta ;
                  
// `regresaFiesta` es `return`

regresaFiesta ::= ENVIA FINREGALO |
                  ENVIA ADORNO regalos FINREGALO ;
                  
// `terminaFiesta` es `break`

terminaFiesta ::= CORTA FINREGALO ;

// leche es el `do until` (se asumió como `do while`):  
// `do {i * 2} until (i < 10)|`

leche ::= HACE {:newScope();:} rutaNavideñaAux {:scope.pop();:} REVISA ABRECUENTO regalo CIERRACUENTO ;

/* _(n) Entrada y salida: `print` y `read` -> `print("hola")` o `print("adios")`_ */

narraCuento ::= NARRA ABRECUENTO l_DEDMOROZ CIERRACUENTO FINREGALO |
                NARRA ABRECUENTO l_PAPANOEL CIERRACUENTO FINREGALO |
                NARRA ABRECUENTO l_SANNICOLAS CIERRACUENTO FINREGALO |
                NARRA ABRECUENTO l_SINTERKLAAS CIERRACUENTO FINREGALO |
                NARRA ABRECUENTO PERSONA CIERRACUENTO FINREGALO ;

escuchaCuento ::= ESCUCHA ABRECUENTO l_SANNICOLAS CIERRACUENTO FINREGALO |
                  ESCUCHA ABRECUENTO l_SINTERKLAAS CIERRACUENTO FINREGALO ;
                  
/* _Producción inicial_ */

bolsaNavideñaAux ::= bolsaNavideñaAux bolsaNavideña |
                     bolsaNavideña ;

navidad ::= {: 
                System.out.println("Inicio de parseo");
                writer.write("Inicio de parseo\n\n");
                scope.push("global");
                symbolTableList.put(scope.peek(), new ArrayList<SymbolTableItem>());
            :}
            bolsaNavideñaAux
            {: 
                printTable();
                System.out.println("Fin de parseo");
                writer.write("Fin de parseo");
            :}
            | error FINREGALO
            {: System.out.println("Error en Navidad. Recuperación del error."); :}
            ;