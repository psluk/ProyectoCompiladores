// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/SourceParserLexer/SourceLexer.jflex

/* JFlex example: partial Java language lexer specification */
package ParserLexer;
import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;

/**
    * This is a JFlex specification for a lexer that recognizes a test language
    */

@SuppressWarnings("fallthrough")
public class LexerProject implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\7\1\10\2\3\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\11\23\2\3\1\24\1\25\1\26\1\3\1\27\4\30"+
    "\1\31\1\30\24\10\1\32\1\33\1\34\1\35\1\36"+
    "\1\3\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\10\1\50\1\51\1\10\1\52\1\53"+
    "\1\54\1\10\1\55\1\56\1\57\1\60\5\10\1\61"+
    "\1\62\1\63\1\64\41\0\2\3\4\10\4\3\1\10"+
    "\2\3\1\0\7\3\1\10\4\3\1\10\5\3\27\10"+
    "\1\3\37\10\1\3\u01ca\10\4\3\14\10\16\3\5\10"+
    "\7\3\1\10\1\3\1\10\21\3\160\0\5\10\1\3"+
    "\2\10\2\3\4\10\1\3\1\10\6\3\1\10\1\3"+
    "\3\10\1\3\1\10\1\3\24\10\1\3\123\10\1\3"+
    "\213\10\1\3\5\0\2\3\246\10\1\3\46\10\2\3"+
    "\1\10\6\3\51\10\6\3\1\10\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\10\4\3\4\10\15\3\6\0\5\3\1\10\4\3"+
    "\13\0\1\3\1\0\3\3\53\10\37\0\4\3\2\10"+
    "\1\0\143\10\1\3\1\10\10\0\1\3\6\0\2\10"+
    "\2\0\1\3\4\0\2\10\12\0\3\10\2\3\1\10"+
    "\17\3\1\0\1\10\1\0\36\10\33\0\2\3\131\10"+
    "\13\0\1\10\16\3\12\0\41\10\11\0\2\10\4\3"+
    "\1\10\2\3\1\0\30\10\4\0\1\10\11\0\1\10"+
    "\3\0\1\10\5\0\22\3\31\10\3\0\4\3\13\10"+
    "\5\3\30\10\1\3\6\10\1\3\2\0\6\3\10\0"+
    "\52\10\72\0\66\10\3\0\1\10\22\0\1\10\7\0"+
    "\12\10\2\0\2\3\12\0\1\3\20\10\3\0\1\3"+
    "\10\10\2\3\2\10\2\3\26\10\1\3\7\10\1\3"+
    "\1\10\3\3\4\10\2\3\1\0\1\10\7\0\2\3"+
    "\2\0\2\3\3\0\1\10\10\3\1\0\4\3\2\10"+
    "\1\3\3\10\2\0\2\3\12\0\4\10\7\3\2\10"+
    "\1\3\1\0\2\3\3\0\1\3\6\10\4\3\2\10"+
    "\2\3\26\10\1\3\7\10\1\3\2\10\1\3\2\10"+
    "\1\3\2\10\2\3\1\0\1\3\5\0\4\3\2\0"+
    "\2\3\3\0\3\3\1\0\7\3\4\10\1\3\1\10"+
    "\7\3\14\0\3\10\1\0\13\3\3\0\1\3\11\10"+
    "\1\3\3\10\1\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\5\10\2\3\1\0\1\10\10\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\10\17\3\2\10\2\0\2\3"+
    "\12\0\1\3\1\10\7\3\1\10\6\0\1\3\3\0"+
    "\1\3\10\10\2\3\2\10\2\3\26\10\1\3\7\10"+
    "\1\3\2\10\1\3\5\10\2\3\1\0\1\10\7\0"+
    "\2\3\2\0\2\3\3\0\7\3\3\0\4\3\2\10"+
    "\1\3\3\10\2\0\2\3\12\0\1\3\1\10\20\3"+
    "\1\0\1\10\1\3\6\10\3\3\3\10\1\3\4\10"+
    "\3\3\2\10\1\3\1\10\1\3\2\10\3\3\2\10"+
    "\3\3\3\10\3\3\14\10\4\3\5\0\3\3\3\0"+
    "\1\3\4\0\2\3\1\10\6\3\1\0\16\3\12\0"+
    "\11\3\1\10\6\3\5\0\10\10\1\3\3\10\1\3"+
    "\27\10\1\3\20\10\2\3\1\0\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\1\3\3\10\2\3"+
    "\1\10\2\3\2\10\2\0\2\3\12\0\20\3\1\10"+
    "\3\0\1\3\10\10\1\3\3\10\1\3\27\10\1\3"+
    "\12\10\1\3\5\10\2\3\1\0\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\6\3\2\10\1\3"+
    "\2\10\2\0\2\3\12\0\1\3\2\10\1\0\14\3"+
    "\4\0\11\10\1\3\3\10\1\3\51\10\2\0\1\10"+
    "\7\0\1\3\3\0\1\3\4\0\1\10\5\3\3\10"+
    "\1\0\7\3\3\10\2\0\2\3\12\0\12\3\6\10"+
    "\1\3\3\0\1\3\22\10\3\3\30\10\1\3\11\10"+
    "\1\3\1\10\2\3\7\10\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\0\2\3\2\0"+
    "\15\3\60\10\1\0\2\10\7\0\4\3\10\10\10\0"+
    "\1\3\12\0\47\3\2\10\1\3\1\10\1\3\5\10"+
    "\1\3\30\10\1\3\1\10\1\3\12\10\1\0\2\10"+
    "\11\0\1\10\2\3\5\10\1\3\1\10\1\3\7\0"+
    "\1\3\12\0\2\3\4\10\40\3\1\10\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\10\1\3\44\10\4\3\24\0\1\3"+
    "\2\0\5\10\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\10\24\0\1\10\12\0\6\3\6\10\4\0\4\10"+
    "\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10"+
    "\14\0\1\10\17\0\2\3\46\10\1\3\1\10\5\3"+
    "\1\10\2\3\53\10\1\3\115\10\1\3\4\10\2\3"+
    "\7\10\1\3\1\10\1\3\4\10\2\3\51\10\1\3"+
    "\4\10\2\3\41\10\1\3\4\10\2\3\7\10\1\3"+
    "\1\10\1\3\4\10\2\3\17\10\1\3\71\10\1\3"+
    "\4\10\2\3\103\10\2\3\3\0\40\3\20\10\20\3"+
    "\126\10\2\3\6\10\3\3\u016c\10\2\3\21\10\1\3"+
    "\32\10\5\3\113\10\3\3\13\10\7\3\22\10\4\0"+
    "\11\3\23\10\3\0\13\3\22\10\2\0\14\3\15\10"+
    "\1\3\3\10\1\3\2\0\14\3\64\10\40\0\3\3"+
    "\1\10\3\3\2\10\1\0\2\3\12\0\41\3\17\0"+
    "\6\3\131\10\7\3\5\10\2\0\42\10\1\0\1\10"+
    "\5\3\106\10\12\3\37\10\1\3\14\0\4\3\14\0"+
    "\12\3\12\0\36\10\2\3\5\10\13\3\54\10\4\3"+
    "\32\10\6\3\12\0\46\3\27\10\5\0\4\3\65\10"+
    "\12\0\1\3\35\0\2\3\13\0\6\3\12\0\15\3"+
    "\1\10\10\3\16\0\1\3\20\0\61\3\5\0\57\10"+
    "\21\0\10\10\3\3\12\0\21\3\11\0\14\3\3\0"+
    "\36\10\15\0\2\10\12\0\54\10\16\0\14\3\44\10"+
    "\24\0\10\3\12\0\3\3\3\10\12\0\44\10\2\3"+
    "\11\10\7\3\53\10\2\3\3\10\20\3\3\0\1\3"+
    "\25\0\4\10\1\0\6\10\1\0\2\10\3\0\1\10"+
    "\5\3\300\10\100\0\26\10\2\3\6\10\2\3\46\10"+
    "\2\3\6\10\2\3\10\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\37\10\2\3\65\10\1\3\7\10"+
    "\1\3\1\10\3\3\3\10\1\3\7\10\3\3\4\10"+
    "\2\3\6\10\4\3\15\10\5\3\3\10\1\3\7\10"+
    "\16\3\5\0\32\3\5\0\20\3\2\10\23\3\1\10"+
    "\13\3\5\0\1\3\12\0\1\3\1\10\15\3\1\10"+
    "\20\3\15\10\3\3\41\10\17\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\10\4\3\1\10\2\3\12\10"+
    "\1\3\1\10\3\3\5\10\6\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\4\10\1\3\13\10\2\3\4\10"+
    "\5\3\5\10\4\3\1\10\21\3\51\10\u0177\3\345\10"+
    "\6\3\4\10\3\0\2\10\14\3\46\10\1\3\1\10"+
    "\5\3\1\10\2\3\70\10\7\3\1\10\17\3\1\0"+
    "\27\10\11\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\7\10\1\3\40\0\57\3\1\10\325\3\3\10\31\3"+
    "\11\10\6\0\1\3\5\10\2\3\5\10\4\3\126\10"+
    "\2\3\2\0\2\3\3\10\1\3\132\10\1\3\4\10"+
    "\5\3\53\10\1\3\136\10\21\3\40\10\60\3\320\10"+
    "\100\3\215\10\103\3\56\10\2\3\15\10\3\3\20\10"+
    "\12\0\2\10\24\3\57\10\1\0\4\3\12\0\1\3"+
    "\37\10\2\0\120\10\2\0\45\3\11\10\2\3\147\10"+
    "\2\3\100\10\5\3\2\10\1\3\1\10\1\3\5\10"+
    "\30\3\20\10\1\0\3\10\1\0\4\10\1\0\27\10"+
    "\5\0\4\3\1\0\13\3\1\10\7\3\64\10\14\3"+
    "\2\0\62\10\22\0\12\3\12\0\6\3\22\0\6\10"+
    "\3\3\1\10\1\3\2\10\13\0\34\10\10\0\2\3"+
    "\27\10\15\0\14\3\35\10\3\3\4\0\57\10\16\0"+
    "\16\3\1\10\12\0\6\3\5\10\1\0\12\10\12\0"+
    "\5\10\1\3\51\10\16\0\11\3\3\10\1\0\10\10"+
    "\2\0\2\3\12\0\6\3\27\10\3\3\1\10\3\0"+
    "\62\10\1\0\1\10\3\0\2\10\2\0\5\10\2\0"+
    "\1\10\1\0\1\10\30\3\3\10\2\3\13\10\5\0"+
    "\2\3\3\10\2\0\12\3\6\10\2\3\6\10\2\3"+
    "\6\10\11\3\7\10\1\3\7\10\1\3\53\10\1\3"+
    "\16\10\6\3\163\10\10\0\1\3\2\0\2\3\12\0"+
    "\6\3\244\10\14\3\27\10\4\3\61\10\4\3\156\10"+
    "\2\3\152\10\46\3\7\10\14\3\5\10\5\3\1\10"+
    "\1\0\12\10\1\3\15\10\1\3\5\10\1\3\1\10"+
    "\1\3\2\10\1\3\2\10\1\3\154\10\41\3\153\10"+
    "\22\3\100\10\2\3\66\10\50\3\15\10\3\3\20\0"+
    "\20\3\20\0\3\3\2\10\30\3\3\10\31\3\1\10"+
    "\6\3\5\10\1\3\207\10\2\3\1\0\4\3\1\10"+
    "\13\3\12\0\7\3\32\10\4\3\1\10\1\3\32\10"+
    "\13\3\131\10\3\3\6\10\2\3\6\10\2\3\6\10"+
    "\2\3\3\10\3\3\2\10\3\3\2\10\22\3\3\0"+
    "\4\3\14\10\1\3\32\10\1\3\23\10\1\3\2\10"+
    "\1\3\17\10\2\3\16\10\42\3\173\10\105\3\65\10"+
    "\210\3\1\0\202\3\35\10\3\3\61\10\17\3\1\0"+
    "\37\3\40\10\15\3\36\10\5\3\46\10\5\0\5\3"+
    "\36\10\2\3\44\10\4\3\10\10\1\3\5\10\52\3"+
    "\236\10\2\3\12\0\6\3\44\10\4\3\44\10\4\3"+
    "\50\10\10\3\64\10\14\3\13\10\1\3\17\10\1\3"+
    "\7\10\1\3\2\10\1\3\13\10\1\3\17\10\1\3"+
    "\7\10\1\3\2\10\103\3\67\10\11\3\26\10\12\3"+
    "\10\10\30\3\6\10\1\3\52\10\1\3\11\10\105\3"+
    "\6\10\2\3\1\10\1\3\54\10\1\3\2\10\3\3"+
    "\1\10\2\3\27\10\12\3\27\10\11\3\37\10\101\3"+
    "\23\10\1\3\2\10\12\3\26\10\12\3\32\10\106\3"+
    "\70\10\6\3\2\10\100\3\1\10\3\0\1\3\2\0"+
    "\5\3\4\0\4\10\1\3\3\10\1\3\35\10\2\3"+
    "\3\0\4\3\1\0\40\3\35\10\3\3\35\10\43\3"+
    "\10\10\1\3\34\10\2\0\31\3\66\10\12\3\26\10"+
    "\12\3\23\10\15\3\22\10\156\3\111\10\67\3\63\10"+
    "\15\3\63\10\15\3\44\10\4\0\10\3\12\0\u0146\3"+
    "\52\10\1\3\2\0\3\3\2\10\113\3\3\0\35\10"+
    "\12\3\1\10\10\3\26\10\13\0\37\3\22\10\4\0"+
    "\52\3\25\10\33\3\27\10\11\3\3\0\65\10\17\0"+
    "\37\3\13\0\2\10\2\0\1\10\11\3\4\0\55\10"+
    "\13\0\2\3\1\0\4\3\1\0\12\3\1\0\2\3"+
    "\31\10\7\3\12\0\6\3\3\0\44\10\16\0\1\3"+
    "\12\0\4\3\1\10\2\0\1\10\10\3\43\10\1\0"+
    "\2\3\1\10\11\3\3\0\60\10\16\0\4\10\4\3"+
    "\4\0\1\3\14\0\1\10\1\3\1\10\43\3\22\10"+
    "\1\3\31\10\14\0\6\3\1\0\2\10\1\0\76\3"+
    "\7\10\1\3\1\10\1\3\4\10\1\3\17\10\1\3"+
    "\12\10\7\3\57\10\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\10\2\3\2\10\2\3\26\10\1\3\7\10"+
    "\1\3\2\10\1\3\5\10\1\3\2\0\1\10\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\10\6\3\1\0"+
    "\5\3\5\10\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\10\22\0\4\10\5\3\12\0\4\3\1\0\3\10"+
    "\36\3\60\10\24\0\2\10\1\3\1\10\10\3\12\0"+
    "\246\3\57\10\7\0\2\3\11\0\27\3\4\10\2\0"+
    "\42\3\60\10\21\0\3\3\1\10\13\3\12\0\46\3"+
    "\53\10\15\0\1\10\7\3\12\0\66\3\33\10\2\3"+
    "\17\0\4\3\12\0\6\3\7\10\271\3\54\10\17\0"+
    "\145\3\100\10\12\0\25\3\10\10\2\3\1\10\2\3"+
    "\10\10\1\3\2\10\1\3\30\10\6\0\1\3\2\0"+
    "\2\3\4\0\1\10\1\0\1\10\2\0\14\3\12\0"+
    "\106\3\10\10\2\3\47\10\7\0\2\3\7\0\1\10"+
    "\1\3\1\10\1\0\33\3\1\10\12\0\50\10\7\0"+
    "\1\10\4\0\10\3\1\0\10\3\1\10\13\0\56\10"+
    "\20\0\3\3\1\10\22\3\111\10\7\3\11\10\1\3"+
    "\45\10\10\0\1\3\10\0\1\10\17\3\12\0\30\3"+
    "\36\10\2\3\26\0\1\3\16\0\111\3\7\10\1\3"+
    "\2\10\1\3\46\10\6\0\3\3\1\0\1\3\2\0"+
    "\1\3\7\0\1\10\1\0\10\3\12\0\6\3\6\10"+
    "\1\3\2\10\1\3\40\10\5\0\1\3\2\0\1\3"+
    "\5\0\1\10\7\3\12\0\u0136\3\23\10\4\0\11\3"+
    "\2\0\1\10\1\0\15\10\1\3\42\10\7\0\3\3"+
    "\5\0\15\3\12\0\126\3\1\10\54\3\4\10\37\3"+
    "\232\10\146\3\157\10\21\3\304\10\u014c\3\141\10\17\3"+
    "\60\10\21\0\6\10\17\0\252\3\107\10\271\3\71\10"+
    "\7\3\37\10\1\3\12\0\6\3\117\10\1\3\12\0"+
    "\6\3\36\10\2\3\5\0\13\3\60\10\7\0\11\3"+
    "\4\10\14\3\12\0\11\3\25\10\5\3\23\10\260\3"+
    "\100\10\200\3\113\10\4\3\1\0\1\10\67\0\7\3"+
    "\4\0\15\10\100\3\2\10\1\3\1\10\1\0\13\3"+
    "\2\0\16\3\370\10\10\3\326\10\52\3\11\10\u01e7\3"+
    "\4\10\1\3\7\10\1\3\2\10\1\3\43\10\17\3"+
    "\1\10\35\3\3\10\2\3\1\10\16\3\4\10\10\3"+
    "\u018c\10\4\3\153\10\5\3\15\10\3\3\11\10\7\3"+
    "\12\10\3\3\2\0\1\3\4\0\134\3\56\0\2\3"+
    "\27\0\u011e\3\5\0\3\3\26\0\2\3\7\0\36\3"+
    "\4\0\224\3\3\0\273\3\125\10\1\3\107\10\1\3"+
    "\2\10\2\3\1\10\2\3\2\10\2\3\4\10\1\3"+
    "\14\10\1\3\1\10\1\3\7\10\1\3\101\10\1\3"+
    "\4\10\2\3\10\10\1\3\7\10\1\3\34\10\1\3"+
    "\4\10\1\3\5\10\1\3\1\10\3\3\7\10\1\3"+
    "\u0154\10\2\3\31\10\1\3\31\10\1\3\37\10\1\3"+
    "\31\10\1\3\37\10\1\3\31\10\1\3\37\10\1\3"+
    "\31\10\1\3\37\10\1\3\31\10\1\3\10\10\2\3"+
    "\151\0\4\3\62\0\10\3\1\0\16\3\1\0\26\3"+
    "\5\0\1\3\17\0\120\3\37\10\6\3\6\10\325\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\5\3\76\10\41\3\1\0\160\3\55\10\3\3"+
    "\7\0\7\10\2\3\12\0\4\3\1\10\u0141\3\36\10"+
    "\1\0\21\3\54\10\16\0\5\3\1\10\320\3\34\10"+
    "\16\0\346\3\7\10\1\3\4\10\1\3\2\10\1\3"+
    "\17\10\1\3\305\10\13\3\7\0\51\3\104\10\7\0"+
    "\1\10\4\3\12\0\u0156\3\1\10\117\3\4\10\1\3"+
    "\33\10\1\3\2\10\1\3\1\10\2\3\1\10\1\3"+
    "\12\10\1\3\4\10\1\3\1\10\1\3\1\10\6\3"+
    "\1\10\4\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\3\10\1\3\2\10\1\3\1\10\2\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\2\10\1\3\1\10\2\3\4\10\1\3\7\10\1\3"+
    "\4\10\1\3\4\10\1\3\1\10\1\3\12\10\1\3"+
    "\21\10\5\3\3\10\1\3\5\10\1\3\21\10\u0134\3"+
    "\12\0\6\3\340\10\40\3\72\10\6\3\336\10\2\3"+
    "\u0182\10\16\3\u0131\10\37\3\36\10\342\3\113\10\5\3"+
    "\u0160\10\121\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\2\16\1\17\1\1\1\20\1\2\1\21\1\22\1\23"+
    "\14\6\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\0\1\34\1\35\1\36\1\37\1\0\1\37"+
    "\1\0\1\40\1\41\1\42\3\6\1\43\5\6\1\44"+
    "\7\6\1\45\1\46\1\47\1\50\1\51\4\0\1\37"+
    "\1\52\7\6\1\53\1\6\1\54\7\6\2\0\1\2"+
    "\2\6\1\55\1\56\1\57\5\6\1\60\2\6\1\61"+
    "\1\6\1\0\1\6\1\62\1\63\1\64\1\6\1\65"+
    "\1\66\2\6\1\67\1\0\2\6\1\70\1\71\1\72"+
    "\1\6\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\152\0\237\0\324\0\152\0\152"+
    "\0\u0109\0\u013e\0\152\0\152\0\u0173\0\u01a8\0\152\0\u01dd"+
    "\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385"+
    "\0\152\0\152\0\152\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\152"+
    "\0\152\0\152\0\152\0\u0636\0\152\0\u066b\0\152\0\u06a0"+
    "\0\u06d5\0\152\0\152\0\152\0\u070a\0\u073f\0\u0212\0\u0774"+
    "\0\u07a9\0\152\0\152\0\u07de\0\u0813\0\u0848\0\u0109\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0109\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\152\0\152\0\152\0\152"+
    "\0\152\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0b98\0\152\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0109\0\u0d40"+
    "\0\u0109\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0b2e\0\u0f52\0\u0f87\0\u0109\0\u0109\0\u0109"+
    "\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u0109\0\u10c5\0\u10fa"+
    "\0\u0109\0\u112f\0\u1164\0\u1199\0\u0109\0\u0109\0\u0109\0\u11ce"+
    "\0\u0109\0\u0109\0\u1203\0\u1238\0\u0109\0\u126d\0\u12a2\0\u12d7"+
    "\0\u0109\0\u0109\0\u0109\0\u130c\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\11"+
    "\1\31\1\3\1\32\1\33\2\11\1\34\1\35\1\36"+
    "\1\37\1\40\2\11\1\41\1\11\1\42\2\11\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\2\54\1\3\1\54\1\3\1\54\1\55\24\54\1\56"+
    "\31\54\67\0\1\4\107\0\1\57\37\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\23\11\4\0"+
    "\2\60\1\0\1\60\1\0\4\60\1\0\21\60\1\61"+
    "\31\60\14\0\1\62\65\0\1\63\66\0\1\64\2\0"+
    "\1\23\1\24\63\0\2\65\77\0\1\66\46\0\1\67"+
    "\10\0\1\70\11\0\1\70\41\0\1\67\1\0\2\24"+
    "\5\0\1\70\11\0\1\70\46\0\1\71\64\0\1\72"+
    "\64\0\1\73\37\0\2\30\1\4\1\30\1\5\60\30"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\15\11\1\74\1\11\1\75\3\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\10\11\1\76"+
    "\12\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\15\11\1\77\5\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\13\11\1\100"+
    "\7\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\1\11\1\101\11\11\1\102\1\11\1\103"+
    "\4\11\1\104\4\0\1\11\7\0\1\11\11\0\2\11"+
    "\4\0\2\11\4\0\6\11\1\105\5\11\1\106\6\11"+
    "\4\0\1\11\7\0\1\11\11\0\2\11\4\0\2\11"+
    "\4\0\15\11\1\107\5\11\4\0\1\11\7\0\1\11"+
    "\11\0\2\11\4\0\2\11\4\0\17\11\1\110\3\11"+
    "\4\0\1\11\7\0\1\11\11\0\2\11\4\0\2\11"+
    "\4\0\5\11\1\111\15\11\4\0\1\11\7\0\1\11"+
    "\11\0\2\11\4\0\2\11\4\0\21\11\1\112\1\11"+
    "\4\0\1\11\7\0\1\11\11\0\2\11\4\0\2\11"+
    "\4\0\17\11\1\113\3\11\4\0\1\11\7\0\1\11"+
    "\11\0\2\11\4\0\2\11\4\0\14\11\1\114\6\11"+
    "\4\0\2\54\1\0\1\54\1\0\1\54\1\0\24\54"+
    "\1\0\31\54\6\0\1\115\43\0\1\116\2\0\1\117"+
    "\1\0\1\120\16\0\1\121\133\0\1\122\26\0\2\65"+
    "\5\0\1\70\11\0\1\70\21\0\36\123\1\124\26\123"+
    "\15\0\1\125\1\0\1\125\2\0\2\126\66\0\1\127"+
    "\37\0\1\11\7\0\1\11\11\0\2\11\4\0\2\11"+
    "\4\0\15\11\1\130\5\11\4\0\1\11\7\0\1\11"+
    "\11\0\2\11\4\0\2\11\4\0\5\11\1\131\15\11"+
    "\4\0\1\11\7\0\1\11\11\0\2\11\4\0\2\11"+
    "\4\0\1\11\1\132\21\11\4\0\1\11\7\0\1\11"+
    "\11\0\2\11\4\0\2\11\4\0\11\11\1\133\6\11"+
    "\1\134\2\11\4\0\1\11\7\0\1\11\11\0\2\11"+
    "\4\0\2\11\4\0\13\11\1\135\7\11\4\0\1\11"+
    "\7\0\1\11\11\0\2\11\4\0\2\11\4\0\15\11"+
    "\1\136\5\11\4\0\1\11\7\0\1\11\11\0\2\11"+
    "\4\0\2\11\4\0\17\11\1\137\3\11\4\0\1\11"+
    "\7\0\1\11\11\0\2\11\4\0\2\11\4\0\14\11"+
    "\1\140\6\11\4\0\1\11\7\0\1\11\11\0\2\11"+
    "\4\0\2\11\4\0\21\11\1\141\1\11\4\0\1\11"+
    "\7\0\1\11\11\0\2\11\4\0\2\11\4\0\3\11"+
    "\1\142\17\11\4\0\1\11\7\0\1\11\11\0\2\11"+
    "\4\0\2\11\4\0\11\11\1\143\11\11\4\0\1\11"+
    "\7\0\1\11\11\0\2\11\4\0\2\11\4\0\1\11"+
    "\1\144\17\11\1\145\1\11\4\0\1\11\7\0\1\11"+
    "\11\0\2\11\4\0\2\11\4\0\17\11\1\146\3\11"+
    "\4\0\1\11\7\0\1\11\11\0\2\11\4\0\2\11"+
    "\4\0\22\11\1\147\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\21\11\1\150\1\11\26\0"+
    "\2\151\4\0\2\151\5\0\6\151\20\0\36\123\1\152"+
    "\47\123\1\153\14\123\1\152\26\123\22\0\2\126\41\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\13\11\1\154\7\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\1\11\1\155\21\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\17\11\1\156\3\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\6\11\1\157\14\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\5\11\1\160\15\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\20\11\1\161\2\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\1\11\1\162\21\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\3\11\1\163\17\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\1\11\1\164\21\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\14\11\1\165\6\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\4\11\1\166\16\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\22\11\1\167\4\0\1\11"+
    "\7\0\1\11\11\0\2\11\4\0\2\11\4\0\11\11"+
    "\1\170\11\11\4\0\1\11\7\0\1\11\11\0\2\11"+
    "\4\0\2\11\4\0\5\11\1\171\15\11\4\0\1\11"+
    "\7\0\1\11\11\0\2\11\4\0\2\11\4\0\11\11"+
    "\1\172\11\11\26\0\2\173\4\0\2\173\5\0\6\173"+
    "\20\0\21\123\1\4\14\123\1\152\26\123\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\5\11\1\174"+
    "\15\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\12\11\1\175\10\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\5\11\1\176"+
    "\15\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\21\11\1\177\1\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\21\11\1\200"+
    "\1\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\13\11\1\201\7\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\21\11\1\202"+
    "\1\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\17\11\1\203\3\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\14\11\1\204"+
    "\6\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\13\11\1\205\7\11\26\0\2\206\4\0"+
    "\2\206\5\0\6\206\20\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\1\11\1\207\21\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\11\11\1\210\11\11\4\0\1\11\7\0\1\11\11\0"+
    "\2\11\4\0\2\11\4\0\14\11\1\211\6\11\4\0"+
    "\1\11\7\0\1\11\11\0\2\11\4\0\2\11\4\0"+
    "\7\11\1\212\13\11\26\0\2\60\4\0\2\60\5\0"+
    "\6\60\20\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\14\11\1\213\6\11\4\0\1\11\7\0"+
    "\1\11\11\0\2\11\4\0\2\11\4\0\15\11\1\214"+
    "\5\11\4\0\1\11\7\0\1\11\11\0\2\11\4\0"+
    "\2\11\4\0\14\11\1\215\6\11\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4929];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\2\11\2\1\2\11\2\1\1\11"+
    "\11\1\3\11\14\1\4\11\1\1\1\11\1\1\1\11"+
    "\2\0\3\11\1\1\1\0\1\1\1\0\1\1\2\11"+
    "\21\1\5\11\4\0\1\1\1\11\21\1\2\0\20\1"+
    "\1\0\12\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    public int getLine() {
        return yyline + 1; // +1 because the line index starts in 0
    }

    public int getColumn() {
        return yycolumn + 1; // +1 because the column index starts in 0
    }

    // Adds a writer to write the errors in the output file,
    // which requires to add another constructor to the lexer
    private FileWriter writer;
    public LexerProject(java.io.Reader in, FileWriter out) {
        this.zzReader = in;
        this.writer = out;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerProject(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { try {
        System.out.println("ERROR: Carácter ilegal <" + yytext() + "> en la línea " + (yyline + 1) + ", columna " + (yycolumn + 1));
        writer.write("ERROR: Carácter ilegal <" + yytext() + "> en la línea " + (yyline + 1) + ", columna " + (yycolumn + 1) + "\n");
    } catch (IOException e) {
        System.out.println("Error al escribir en el archivo de salida: " + e.getMessage());
    }
            }
          // fall through
          case 60: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 61: break;
          case 3:
            { return symbol(sym.BALTASAR);
            }
          // fall through
          case 62: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 63: break;
          case 5:
            { return symbol(sym.GASPAR);
            }
          // fall through
          case 64: break;
          case 6:
            { return symbol(sym.PERSONA);
            }
          // fall through
          case 65: break;
          case 7:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 66: break;
          case 8:
            { return symbol(sym.CIERRACUENTO);
            }
          // fall through
          case 67: break;
          case 9:
            { return symbol(sym.BROMISTA, yytext());
            }
          // fall through
          case 68: break;
          case 10:
            { return symbol(sym.RODOLFO, yytext());
            }
          // fall through
          case 69: break;
          case 11:
            { return symbol(sym.ADORNO);
            }
          // fall through
          case 70: break;
          case 12:
            { return symbol(sym.BRIOSO, yytext());
            }
          // fall through
          case 71: break;
          case 13:
            { return symbol(sym.COMETA, yytext());
            }
          // fall through
          case 72: break;
          case 14:
            { return symbol(sym.l_SANNICOLAS);
            }
          // fall through
          case 73: break;
          case 15:
            { return symbol(sym.CANALLA);
            }
          // fall through
          case 74: break;
          case 16:
            { return symbol(sym.BUFON);
            }
          // fall through
          case 75: break;
          case 17:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 76: break;
          case 18:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 77: break;
          case 19:
            { return symbol(sym.MELCHOR);
            }
          // fall through
          case 78: break;
          case 20:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 79: break;
          case 21:
            { return symbol(sym.FINREGALO);
            }
          // fall through
          case 80: break;
          case 22:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 81: break;
          case 23:
            { return symbol(sym.CUPIDO, yytext());
            }
          // fall through
          case 82: break;
          case 24:
            { string.append( yytext() );
            }
          // fall through
          case 83: break;
          case 25:
            { yybegin(YYINITIAL); 
                                    return symbol(sym.l_DEDMOROZ, 
                                    string.toString());
            }
          // fall through
          case 84: break;
          case 26:
            { string.append('\\');
            }
          // fall through
          case 85: break;
          case 27:
            { return symbol(sym.FELICIDAD);
            }
          // fall through
          case 86: break;
          case 28:
            { return symbol(sym.DANZARIN, yytext());
            }
          // fall through
          case 87: break;
          case 29:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 88: break;
          case 30:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 89: break;
          case 31:
            { return symbol(sym.l_SINTERKLAAS);
            }
          // fall through
          case 90: break;
          case 32:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 91: break;
          case 33:
            { return symbol(sym.COPODENIEVE);
            }
          // fall through
          case 92: break;
          case 34:
            { return symbol(sym.ASTUTO);
            }
          // fall through
          case 93: break;
          case 35:
            { return symbol(sym.HACE);
            }
          // fall through
          case 94: break;
          case 36:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 95: break;
          case 37:
            { string.append('\"');
            }
          // fall through
          case 96: break;
          case 38:
            { string.append('\n');
            }
          // fall through
          case 97: break;
          case 39:
            { string.append('\r');
            }
          // fall through
          case 98: break;
          case 40:
            { string.append('\t');
            }
          // fall through
          case 99: break;
          case 41:
            { return symbol(sym.l_PAPANOEL);
            }
          // fall through
          case 100: break;
          case 42:
            { return symbol(sym.CHISPA);
            }
          // fall through
          case 101: break;
          case 43:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 102: break;
          case 44:
            { return symbol(sym.SANNICOLAS, yytext());
            }
          // fall through
          case 103: break;
          case 45:
            { return symbol(sym.PAPANOEL, yytext());
            }
          // fall through
          case 104: break;
          case 46:
            { return symbol(sym.HADA);
            }
          // fall through
          case 105: break;
          case 47:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 106: break;
          case 48:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 107: break;
          case 49:
            { return symbol(sym.l_tCOLACHO);
            }
          // fall through
          case 108: break;
          case 50:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 109: break;
          case 51:
            { return symbol(sym.l_fCOLACHO);
            }
          // fall through
          case 110: break;
          case 52:
            { return symbol(sym.SINTERKLAAS, yytext());
            }
          // fall through
          case 111: break;
          case 53:
            { return symbol(sym.CHIMENEA);
            }
          // fall through
          case 112: break;
          case 54:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 113: break;
          case 55:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 114: break;
          case 56:
            { return symbol(sym.ENVIA);
            }
          // fall through
          case 115: break;
          case 57:
            { return symbol(sym.DEDMOROZ, yytext());
            }
          // fall through
          case 116: break;
          case 58:
            { return symbol(sym.COLACHO, yytext());
            }
          // fall through
          case 117: break;
          case 59:
            { return symbol(sym.BOLSA);
            }
          // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
